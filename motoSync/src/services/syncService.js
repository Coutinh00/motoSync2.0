/**
 * Servi√ßo de Sincroniza√ß√£o
 * Gerencia a sincroniza√ß√£o entre API e AsyncStorage
 */

import { userService } from './api';
import { userListStorage } from './storage';

/**
 * Sincroniza usu√°rios da API com o AsyncStorage
 * @returns {Promise<Array>} Lista de usu√°rios sincronizados
 */
export const syncUsers = async () => {
  try {
    console.log('üîÑ Iniciando sincroniza√ß√£o de usu√°rios...');
    
    // Buscar usu√°rios da API
    const apiUsers = await userService.getAll();
    console.log(`üì° ${apiUsers.length} usu√°rios encontrados na API`);
    
    // Mapear dados da API para o formato interno
    const mappedUsers = apiUsers.map(apiUser => ({
      id: apiUser.id,
      name: apiUser.login,
      email: apiUser.login,
      cpf: '',
      phone: '',
      filial: 'Butant√£-1',
      role: 'Usu√°rio',
      status: 'Ativo',
      createdAt: apiUser.createdAt,
      login: apiUser.login,
    }));
    
    // Salvar no AsyncStorage
    await userListStorage.saveUsers(mappedUsers);
    console.log('üíæ Usu√°rios salvos no AsyncStorage');
    
    return mappedUsers;
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o:', error.message);
    
    // Em caso de erro, tentar usar dados locais
    const localUsers = await userListStorage.getUsers();
    console.log(`üì± Usando ${localUsers.length} usu√°rios locais`);
    
    return localUsers;
  }
};

/**
 * Sincroniza um usu√°rio espec√≠fico
 * @param {string} userId - ID do usu√°rio
 * @returns {Promise<Object>} Dados do usu√°rio sincronizado
 */
export const syncUser = async (userId) => {
  try {
    console.log(`üîÑ Sincronizando usu√°rio ${userId}...`);
    
    // Buscar usu√°rio da API
    const apiUser = await userService.getById(userId);
    
    // Mapear dados da API para o formato interno
    const mappedUser = {
      id: apiUser.id,
      name: apiUser.login,
      email: apiUser.login,
      cpf: '',
      phone: '',
      filial: 'Butant√£-1',
      role: 'Usu√°rio',
      status: 'Ativo',
      createdAt: apiUser.createdAt,
      login: apiUser.login,
    };
    
    // Atualizar no AsyncStorage
    await userListStorage.updateUser(userId, mappedUser);
    console.log('üíæ Usu√°rio atualizado no AsyncStorage');
    
    return mappedUser;
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o do usu√°rio:', error.message);
    throw error;
  }
};

/**
 * For√ßa sincroniza√ß√£o completa
 * @returns {Promise<Object>} Resultado da sincroniza√ß√£o
 */
export const forceSync = async () => {
  try {
    console.log('üîÑ For√ßando sincroniza√ß√£o completa...');
    
    const users = await syncUsers();
    
    return {
      success: true,
      usersCount: users.length,
      message: 'Sincroniza√ß√£o completa realizada com sucesso',
    };
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o for√ßada:', error.message);
    
    return {
      success: false,
      error: error.message,
      message: 'Erro na sincroniza√ß√£o',
    };
  }
};

/**
 * Verifica se h√° dados para sincronizar
 * @returns {Promise<Object>} Status da sincroniza√ß√£o
 */
export const checkSyncStatus = async () => {
  try {
    // Buscar dados da API
    const apiUsers = await userService.getAll();
    
    // Buscar dados locais
    const localUsers = await userListStorage.getUsers();
    
    return {
      apiCount: apiUsers.length,
      localCount: localUsers.length,
      needsSync: apiUsers.length !== localUsers.length,
      lastSync: new Date().toISOString(),
    };
  } catch (error) {
    return {
      apiCount: 0,
      localCount: 0,
      needsSync: true,
      error: error.message,
    };
  }
};

export default {
  syncUsers,
  syncUser,
  forceSync,
  checkSyncStatus,
};
